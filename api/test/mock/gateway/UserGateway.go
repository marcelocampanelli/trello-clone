// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	entity "github.com/marcelocampanelli/trello-clone/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserGateway is an autogenerated mock type for the UserGateway type
type UserGateway struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserGateway) Create(user *entity.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByCPF provides a mock function with given fields: cpf
func (_m *UserGateway) FindByCPF(cpf string) (*entity.User, error) {
	ret := _m.Called(cpf)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return rf(cpf)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: email
func (_m *UserGateway) FindByEmail(email string) (*entity.User, error) {
	ret := _m.Called(email)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *UserGateway) FindByID(id int32) (*entity.User, error) {
	ret := _m.Called(id)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (*entity.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int32) *entity.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *UserGateway) Update(user *entity.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserGateway creates a new instance of UserGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserGateway {
	mock := &UserGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
