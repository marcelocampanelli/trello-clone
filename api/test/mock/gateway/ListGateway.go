// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	entity "github.com/marcelocampanelli/trello-clone/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// ListGateway is an autogenerated mock type for the ListGateway type
type ListGateway struct {
	mock.Mock
}

// Create provides a mock function with given fields: list
func (_m *ListGateway) Create(list *entity.List) (*entity.List, error) {
	ret := _m.Called(list)

	var r0 *entity.List
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.List) (*entity.List, error)); ok {
		return rf(list)
	}
	if rf, ok := ret.Get(0).(func(*entity.List) *entity.List); ok {
		r0 = rf(list)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.List) error); ok {
		r1 = rf(list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ListGateway) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: boardID
func (_m *ListGateway) FindAll(boardID string) ([]*entity.List, error) {
	ret := _m.Called(boardID)

	var r0 []*entity.List
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entity.List, error)); ok {
		return rf(boardID)
	}
	if rf, ok := ret.Get(0).(func(string) []*entity.List); ok {
		r0 = rf(boardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.List)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(boardID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *ListGateway) FindByID(id string) (*entity.List, error) {
	ret := _m.Called(id)

	var r0 *entity.List
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.List, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.List); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, list
func (_m *ListGateway) Update(id string, list *entity.List) (*entity.List, error) {
	ret := _m.Called(id, list)

	var r0 *entity.List
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *entity.List) (*entity.List, error)); ok {
		return rf(id, list)
	}
	if rf, ok := ret.Get(0).(func(string, *entity.List) *entity.List); ok {
		r0 = rf(id, list)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.List)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *entity.List) error); ok {
		r1 = rf(id, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewListGateway creates a new instance of ListGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListGateway {
	mock := &ListGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
