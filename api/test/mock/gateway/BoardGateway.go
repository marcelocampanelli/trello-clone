// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	entity "github.com/marcelocampanelli/trello-clone/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// BoardGateway is an autogenerated mock type for the BoardGateway type
type BoardGateway struct {
	mock.Mock
}

// Create provides a mock function with given fields: board
func (_m *BoardGateway) Create(board *entity.Board) (*string, error) {
	ret := _m.Called(board)

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Board) (*string, error)); ok {
		return rf(board)
	}
	if rf, ok := ret.Get(0).(func(*entity.Board) *string); ok {
		r0 = rf(board)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Board) error); ok {
		r1 = rf(board)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *BoardGateway) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: userID
func (_m *BoardGateway) FindAll(userID string) ([]*entity.Board, error) {
	ret := _m.Called(userID)

	var r0 []*entity.Board
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entity.Board, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*entity.Board); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Board)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *BoardGateway) FindByID(id string) (*entity.Board, error) {
	ret := _m.Called(id)

	var r0 *entity.Board
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Board, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Board); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Board)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, board
func (_m *BoardGateway) Update(id string, board *entity.Board) error {
	ret := _m.Called(id, board)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *entity.Board) error); ok {
		r0 = rf(id, board)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBoardGateway creates a new instance of BoardGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBoardGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *BoardGateway {
	mock := &BoardGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
