// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	user "github.com/marcelocampanelli/trello-clone/internal/usecase/user"
	mock "github.com/stretchr/testify/mock"
)

// CreateUserUseCaseInterface is an autogenerated mock type for the CreateUserUseCaseInterface type
type CreateUserUseCaseInterface struct {
	mock.Mock
}

// Execute provides a mock function with given fields: input
func (_m *CreateUserUseCaseInterface) Execute(input *user.CreateUserInputDTO) (*user.CreateUserOutputDTO, error) {
	ret := _m.Called(input)

	var r0 *user.CreateUserOutputDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.CreateUserInputDTO) (*user.CreateUserOutputDTO, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*user.CreateUserInputDTO) *user.CreateUserOutputDTO); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.CreateUserOutputDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.CreateUserInputDTO) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCreateUserUseCaseInterface creates a new instance of CreateUserUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateUserUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateUserUseCaseInterface {
	mock := &CreateUserUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
