// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/google/wire"
	"github.com/marcelocampanelli/trello-clone/internal/domain/gateway"
	"github.com/marcelocampanelli/trello-clone/internal/infra/repository"
	"github.com/marcelocampanelli/trello-clone/internal/infra/web/handlers"
	"github.com/marcelocampanelli/trello-clone/internal/usecase/board"
	"github.com/marcelocampanelli/trello-clone/internal/usecase/card"
	"github.com/marcelocampanelli/trello-clone/internal/usecase/list"
	"github.com/marcelocampanelli/trello-clone/internal/usecase/user"
	"go.mongodb.org/mongo-driver/mongo"
)

// Injectors from wire.go:

func InitializeUserHandler(client *mongo.Client) *handlers.UserHandler {
	userRepository := repository.NewUserRepository(client)
	createUserUseCase := user.NewUserCreateUseCase(userRepository)
	updateUserUseCase := user.NewUserUpdateUseCase(userRepository)
	userHandler := handlers.NewUserHandler(createUserUseCase, updateUserUseCase)
	return userHandler
}

func InitializeBoardHandler(client *mongo.Client) *handlers.BoardHandler {
	boardRepository := repository.NewBoardRepository(client)
	findAllBoardUseCase := board.NewBoardFindAllUseCase(boardRepository)
	findByIDBoardUseCase := board.NewBoardFindByIDUseCase(boardRepository)
	createBoardUseCase := board.NewBoardCreateUseCase(boardRepository)
	updateBoardUseCase := board.NewBoardUpdateUseCase(boardRepository)
	deleteBoardUseCase := board.NewBoardDeleteUseCase(boardRepository)
	boardHandler := handlers.NewBoardHandler(findAllBoardUseCase, findByIDBoardUseCase, createBoardUseCase, updateBoardUseCase, deleteBoardUseCase)
	return boardHandler
}

func InitializeListHandler(client *mongo.Client) *handlers.ListHandler {
	listRepository := repository.NewListRepository(client)
	findAllListUseCase := list.NewListFindAllUseCase(listRepository)
	findByIDListUseCase := list.NewListFindByIDUseCase(listRepository)
	createListUseCase := list.NewListCreateUseCase(listRepository)
	updateListUseCase := list.NewListUpdateUseCase(listRepository)
	deleteListUseCase := list.NewListDeleteUseCase(listRepository)
	listHandler := handlers.NewListHandler(findAllListUseCase, findByIDListUseCase, createListUseCase, updateListUseCase, deleteListUseCase)
	return listHandler
}

func InitializeCardHandler(client *mongo.Client) *handlers.CardHandler {
	cardRepository := repository.NewCardRepository(client)
	createCardUseCase := card.NewCardCreateUseCase(cardRepository)
	updateCardUseCase := card.NewCardUpdateUseCase(cardRepository)
	deleteCardUseCase := card.NewCardDeleteUseCase(cardRepository)
	findAllByListCardUseCase := card.NewCardFindAllByListUseCase(cardRepository)
	findByIDCardUseCase := card.NewCardFindByIDUseCase(cardRepository)
	cardHandler := handlers.NewCardHandler(createCardUseCase, updateCardUseCase, deleteCardUseCase, findAllByListCardUseCase, findByIDCardUseCase)
	return cardHandler
}

// wire.go:

var setUserRepositoryDependency = wire.NewSet(repository.NewUserRepository, wire.Bind(new(gateway.UserGateway), new(*repository.UserRepository)))

var setBoardRepositoryDependency = wire.NewSet(repository.NewBoardRepository, wire.Bind(new(gateway.BoardGateway), new(*repository.BoardRepository)))

var setListRepositoryDependency = wire.NewSet(repository.NewListRepository, wire.Bind(new(gateway.ListGateway), new(*repository.ListRepository)))

var setCardRepositoryDependency = wire.NewSet(repository.NewCardRepository, wire.Bind(new(gateway.CardGateway), new(*repository.CardRepository)))
